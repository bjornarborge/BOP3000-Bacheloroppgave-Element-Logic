@page "/productpage"
@using WebStoreElementLogic.Data;
@using WebStoreElementLogic.Entities;
@using WebStoreElementLogic.Interfaces;
@inject IProductService ProductService;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@if (DeleteAlert)
{
    <Alert OnCancel="CancelDelete">
        <h3>Delete Product</h3>
        Are you sure you wish to delete 
        <span class="text-danger text-decoration-underline">@Products[SelectedIndex].Name?</span>
        <div class="d-flex flex-row justify-content-around">
            <button @onclick="CancelDelete" class="btn btn-success mt-3">Cancel</button>
        <button @onclick="() => Delete(Products[SelectedIndex].Id)">Delete </button>
        </div>
    </Alert>
}

<div class="d-flex justify-content-between">
    <div class="container-fluid">
        @for (int i = 0;Products != null && i < Products.Count; i++)
        {
                <ProductListItem
                Info=(Products)[i]
                Index="i"
                OnSelected="SelectProduct"
                Selected="SelectedIndex == i" />

        }
        @if (Products == null)
        {
            <h3>Loading Products...</h3>
        }
    </div>
    <div class="container-fluid">

        <!-- TODO: better solution -->
        @if (Products != null)
        {
            <button class="btn btn-primary mt-2 bottom-0 mb-4 rounded-pill position-fixed align-self-end d-block" 
            style="z-index: 3; transform: translateX(-5vw);"
            @onclick="New">
                <h3>Add Product</h3>
            </button>
        }

        <div class="container-fluid position-fixed w-50 pe-4">
            @if (SelectedIndex >= 0)
            {
                <ProductForm
                Title="Edit product"
                SaveLabel="Save changes"
                DiscardLabel="Discard changes"
                DeleteButton
                Info="Products[SelectedIndex]"
                Copy="(Product) Products[SelectedIndex].Clone()"
                OnSave="SaveHandler"
                OnDelete="DeleteHandler" />
            }
            @if (AddNew)
            {
                <ProductForm
                Title="Add new product"
                SaveLabel="Add"
                DiscardLabel="Cancel"
                Info="newInfo"
                Copy="new Product()"
                OnSave="SaveHandler"
                OnDiscard="Discard" />
            }
        </div>
    </div>
</div>


@code {
    public List<Product>? Products = new List<Product>();

    private Product newInfo = new Product();

    private bool AddNew = false;
    private bool DeleteAlert = false;
    private bool NoConnection = false;

    private int SelectedIndex = -1;


    protected override async Task OnInitializedAsync()
    {
        // method for showing productname from database into page
        try
        {
            // Store in a new list temporarily to avoid seting Products to null
            List<Product> FetchedProducts = await ProductService.GetProducts(0, "name", "descr");
            Products = FetchedProducts;
        }
        catch(Exception e)
        {
            NoConnection = true;
        }

    }


    private void SelectProduct(int index)
    {
        AddNew = false;
        SelectedIndex = index;
    }

    protected async Task SaveHandler()
    {
        if (AddNew)
        {
            // Adding product to database         
            await ProductService.Create(newInfo);
            Products.Add(newInfo);
            AddNew = false;

        }
        StateHasChanged();
    }

    private void DeleteHandler()
    {
        DeleteAlert = true;
    }

    private void CancelDelete()
    {
        DeleteAlert = false;
    }

    protected async Task Delete(int id)
    {
        await ProductService.Delete(id);
        
        DeleteAlert = false;

        if (SelectedIndex >= 0)
        {
            Products.RemoveAt(SelectedIndex);
            SelectedIndex = -1;
        }
    }
    
    private async Task New()
    {
        var productsList = await ProductService.GetNextID(0);
        newInfo.Id = productsList.FirstOrDefault()?.Id ?? 0;
        newInfo = new Product();
        SelectedIndex = -1;
        AddNew = true;
        
        NavigationManager.NavigateTo("/productpage");

        StateHasChanged();
    }

    private void Discard()
    {
        AddNew = false;
        StateHasChanged();
    }

}

